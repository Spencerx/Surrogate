<?php

/**
 * BaseListner
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property enum $listner_type
 * @property string $ip_address
 * @property int $port
 * @property bigint $config_id
 * @property ListnerConfig $ListnerConfig
 * @property Doctrine_Collection $VirtualServiceListners
 * 
 * @method enum                getListnerType()            Returns the current record's "listner_type" value
 * @method string              getIpAddress()              Returns the current record's "ip_address" value
 * @method int                 getPort()                   Returns the current record's "port" value
 * @method bigint              getConfigId()               Returns the current record's "config_id" value
 * @method ListnerConfig       getListnerConfig()          Returns the current record's "ListnerConfig" value
 * @method Doctrine_Collection getVirtualServiceListners() Returns the current record's "VirtualServiceListners" collection
 * @method Listner             setListnerType()            Sets the current record's "listner_type" value
 * @method Listner             setIpAddress()              Sets the current record's "ip_address" value
 * @method Listner             setPort()                   Sets the current record's "port" value
 * @method Listner             setConfigId()               Sets the current record's "config_id" value
 * @method Listner             setListnerConfig()          Sets the current record's "ListnerConfig" value
 * @method Listner             setVirtualServiceListners() Sets the current record's "VirtualServiceListners" collection
 * 
 * @package    webadmin
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseListner extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('listner');
        $this->hasColumn('listner_type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'ForwardTransparent',
              1 => 'ForwardSocks45',
              2 => 'ReverseBalanceHttp',
              3 => 'ReverseBalanceHttps',
             ),
             'notnull' => true,
             ));
        $this->hasColumn('ip_address', 'string', 15, array(
             'type' => 'string',
             'length' => 15,
             ));
        $this->hasColumn('port', 'int', null, array(
             'type' => 'int',
             ));
        $this->hasColumn('config_id', 'bigint', null, array(
             'type' => 'bigint',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('ListnerConfig', array(
             'local' => 'config_id',
             'foreign' => 'id'));

        $this->hasMany('VirtualServiceListners', array(
             'local' => 'id',
             'foreign' => 'listner_id'));
    }
}