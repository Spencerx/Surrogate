#!/usr/bin/escript

main(["config"|R]) ->
	config_cmd(R);
main(Args) ->
	Config = read_config(),
	Cookie = proplists:get_value(cookie,Config,erlang:get_cookie()),
	Node =
	case proplists:get_value(node,Config) of
		{Mode,CfgNode} ->
			HostCmd = 
			case Mode of
				shortnames -> "hostname -s";
				longnames -> "hostname -f"
			end,
			HostStr = string:strip(os:cmd(HostCmd),both,$\n),
			CtlNodeStr = lists:flatten(io_lib:format("surrogatectl~s@~s",[os:getpid(),HostStr])),
			CtlNode = list_to_atom(CtlNodeStr),
			net_kernel:start([CtlNode,Mode]),
			erlang:set_cookie(node(),Cookie),
			CfgNode;
		_ ->
			erlang:halt(1)
	end,
	put(remotenode,Node),		
	%io:format("Config: ~p~n",[Config]),
	case net_adm:ping(Node) of
		pong ->
			io:format("Node connected: ~p~n",[Node]),
			R = rpc:call(Node,surrogate_cli,exec_cmds,[Args]),
			%decode_cmds(Args);
			io:format("~p: ~p~n",[Node,R]),
			ok;
		pang ->
			io:format("Error: node ~p could not connect to node ~p with cookie ~p~n",[node(),Node,erlang:get_cookie()])
	end;
main(Args) ->
	io:format("Invalid Input:~n~p~n",[Args]).

config_cmd(["list"|_Args]) ->
	Conf = read_config(),
	lists:foreach(fun({K,V}) -> io:format("~p -> ~p~n",[K,V]); (_) -> ok end,Conf);
config_cmd(["set","name",ShortNode|_]) ->
	Node = list_to_atom(ShortNode),
	Value = {longnames,Node},
	NewConf = lists:filter(fun({node,_}) -> false; (_) -> true end,read_config()),
	R = replace_config([{node,Value}|NewConf]),
	io:format("~p~n",[R]);
config_cmd(["set","sname",ShortNode|_]) ->
	Node = list_to_atom(ShortNode),
	Value = {shortnames,Node},
	NewConf = lists:filter(fun({node,_}) -> false; (_) -> true end,read_config()),
	R = replace_config([{node,Value}|NewConf]),
	io:format("~p~n",[R]);
config_cmd(["set","cookie",CookieStr|_]) ->
	Cookie = list_to_atom(CookieStr),
	NewConf = lists:filter(fun({cookie,_}) -> false; (_) -> true end,read_config()),
	R = replace_config([{cookie,Cookie}|NewConf]),
	io:format("~p~n",[R]);
config_cmd([Action|_Args]) ->
	io:format("config command has no action ~p~n~n",[Action]),
	usage().

replace_config(Conf) ->
	ConfList = [ io_lib:format("~p.\n",[ConfLine]) || ConfLine <- Conf],
	FileName =
	case get_config_file() of
		not_found -> ".surrogatectl";
		File -> File
	end,
	file:write_file(FileName,ConfList).

read_config() ->
	case get_config_file() of
		not_found ->
			io:format("No config file found.~n"),
			[];
		File ->
			case file:consult(File) of
				{ok,Config} ->
					Config;
				_ ->
					[]
			end
	end.

get_config_file() ->
	CfgFiles = [".surrogatectl",os:getenv("HOME")++"/.surrogatectl"],
	get_config_file2(CfgFiles).

get_config_file2([]) ->
	not_found;
get_config_file2([F|R]) ->
	case filelib:is_file(F) of
		true ->
			F;
		false ->
			get_config_file2(R)
	end.

usage() ->
	io:format("surrogatectl config list -- List contents of config file~n"),
	io:format("surrogatectl config set cookie <cookie value>~n"),
	io:format("surrogatectl config set node sname <short node name>~n"),
	io:format("surrogatectl config set node name <long node name>~n"),
	io:format("surrogatectl vip list -- List vips managed by cluster_supervisor~n"),
	io:format("surrogatectl vip enable <IP4 or IP6 address>~n"),
	io:format("surrogatectl vip disable <IP4 or IP6 address>~n"),
	io:format("surrogatectl vip setnodes <IP4 or IP6 address> <nodename> [<nodename> ... <nodename>]~n"),
	io:format("surrogatectl user list -- List users in surrogate's user database~n"),
	io:format("surrogatectl user add <username> <password>~n"),
	io:format("surrogatectl user delete <username>~n"),
	ok.
	
